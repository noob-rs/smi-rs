[target.thumbv7em-none-eabi]
# uncomment this to make `cargo run` execute programs on QEMU
# runner = "qemu-system-arm -cpu cortex-m3 -machine lm3s6965evb -nographic -semihosting-config enable=on,target=native -kernel"

# [target.'cfg(all(target_arch = "arm", target_os = "none"))']
# [target.thumbv7em-none-eabi]
# uncomment ONE of these three option to make `cargo run` start a GDB session
# which option to pick depends on your system
# runner = "arm-none-eabi-gdb -q -x openocd.gdb"
# runner = "gdb-multiarch -q -x openocd.gdb"
# runner = "gdb -q -x openocd.gdb"
# linker = "arm-none-eabi-gcc"

rustflags = [
    # Previously, the linker arguments --nmagic and -Tlink.x were set here.
    # They are now set by build.rs instead. The linker argument can still
    # only be set here, if a custom linker is needed.

    # By default, the LLD linker is used, which is shipped with the Rust
    # toolchain. If you run into problems with LLD, you can switch to the
    # GNU linker by uncommenting this line:
    "-C",
    "linker=arm-none-eabi-gcc",
    # "-C",
    # "link-arg=-Wl,-w",
    # If you need to link to pre-compiled C libraries provided by a C toolchain
    # use GCC as the linker by uncommenting the three lines below:
    # "-C",
    # "linker=arm-none-eabi-gcc",
    # # # "-C",
    # # # "link-arg=-nostartfiles",
    "-C",
    "link-args=-mcpu=cortex-m4",
    "-C",
    "link-args=--specs=nano.specs",
    "-C",
    "link-args=-mfloat-abi=softfp",
    "-C",
    "link-args=-mfpu=fpv4-sp-d16",
    "-C",
    "link-args=-mthumb",
    "-C",
    "link_args=-ffunction-sections",
    "-C",
    "link-args=-fdata-sections",
    # "-C",
    # "link-args=-g",
    # "-C",
    # "link-args=-Wall",
    # "-C",
    # "link-args=-pipe",
    "-C",
    "link-args=-Wl,--gc-sections",
    "-C",
    "link-arg=-T/home/stefan/work/HSA/science-meets-industry-2024/smi-rs/memory.x",
    # "-C",
    # "link-args=@/home/stefan/work/mtw/Wi-Fi_TCP_Client/build/APP_CY8CPROTO-062-4343W/Debug/objlist.rsp",
    # "-C",
    # "link-arg=-nostartfiles",
    # "-C",
    # "link-arg=-nodefaultlibs",
    # "-C",
    # "link-arg=-nostdlib",
    "-C",
    "link-args=-Wl,--start-group libsmi.a -Wl,--end-group",
    # "-C",
    # "link-arg=-Tdefmt.x",
]

[build]
# Pick ONE of these default compilation targets
# target = "thumbv6m-none-eabi"        # Cortex-M0 and Cortex-M0+
# target = "thumbv7m-none-eabi"        # Cortex-M3
target = "thumbv7em-none-eabi" # Cortex-M4 and Cortex-M7 (no FPU)
# target = "thumbv7em-none-eabihf"     # Cortex-M4F and Cortex-M7F (with FPU)
# target = "thumbv8m.base-none-eabi"   # Cortex-M23
# target = "thumbv8m.main-none-eabi"   # Cortex-M33 (no FPU)
# target = "thumbv8m.main-none-eabihf" # Cortex-M33 (with FPU)
