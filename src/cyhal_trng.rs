#![allow(non_upper_case_globals, non_camel_case_types, non_snake_case, unused)]
/* automatically generated by rust-bindgen 0.69.4 */

pub const CYHAL_GARO31_INITSTATE: u32 = 79764919;
pub const CYHAL_FIRO31_INITSTATE: u32 = 79764919;
pub const MAX_TRNG_BIT_SIZE: u32 = 32;
#[doc = " @brief Provides the result of an operation as a structured bitfield.\n\n @note A newer version @ref cy_rslt_decode_t is also available for improved\n debugging experience.\n\n See the \\ref anchor_general_description \"General Description\"\n for more details on structure and usage."]
pub type cy_rslt_t = u32;
#[doc = " \\brief Cryptography component (CRYPTO)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CRYPTO_V2_Type {
    #[doc = "< 0x00000000 Control"]
    pub CTL: u32,
    pub RESERVED: u32,
    #[doc = "< 0x00000008 SRAM power control"]
    pub RAM_PWR_CTL: u32,
    #[doc = "< 0x0000000C SRAM power delay control"]
    pub RAM_PWR_DELAY_CTL: u32,
    #[doc = "< 0x00000010 ECC control"]
    pub ECC_CTL: u32,
    pub RESERVED1: [u32; 3usize],
    #[doc = "< 0x00000020 Error status 0"]
    pub ERROR_STATUS0: u32,
    #[doc = "< 0x00000024 Error status 1"]
    pub ERROR_STATUS1: u32,
    pub RESERVED2: [u32; 54usize],
    #[doc = "< 0x00000100 Interrupt register"]
    pub INTR: u32,
    #[doc = "< 0x00000104 Interrupt set register"]
    pub INTR_SET: u32,
    #[doc = "< 0x00000108 Interrupt mask register"]
    pub INTR_MASK: u32,
    #[doc = "< 0x0000010C Interrupt masked register"]
    pub INTR_MASKED: u32,
    pub RESERVED3: [u32; 60usize],
    #[doc = "< 0x00000200 Pseudo random LFSR control 0"]
    pub PR_LFSR_CTL0: u32,
    #[doc = "< 0x00000204 Pseudo random LFSR control 1"]
    pub PR_LFSR_CTL1: u32,
    #[doc = "< 0x00000208 Pseudo random LFSR control 2"]
    pub PR_LFSR_CTL2: u32,
    #[doc = "< 0x0000020C Pseudo random maximum control"]
    pub PR_MAX_CTL: u32,
    #[doc = "< 0x00000210 Pseudo random command"]
    pub PR_CMD: u32,
    pub RESERVED4: u32,
    #[doc = "< 0x00000218 Pseudo random result"]
    pub PR_RESULT: u32,
    pub RESERVED5: [u32; 25usize],
    #[doc = "< 0x00000280 True random control 0"]
    pub TR_CTL0: u32,
    #[doc = "< 0x00000284 True random control 1"]
    pub TR_CTL1: u32,
    #[doc = "< 0x00000288 True random control 2"]
    pub TR_CTL2: u32,
    #[doc = "< 0x0000028C True random status"]
    pub TR_STATUS: u32,
    #[doc = "< 0x00000290 True random command"]
    pub TR_CMD: u32,
    pub RESERVED6: u32,
    #[doc = "< 0x00000298 True random result"]
    pub TR_RESULT: u32,
    pub RESERVED7: u32,
    #[doc = "< 0x000002A0 True random GARO control"]
    pub TR_GARO_CTL: u32,
    #[doc = "< 0x000002A4 True random FIRO control"]
    pub TR_FIRO_CTL: u32,
    pub RESERVED8: [u32; 6usize],
    #[doc = "< 0x000002C0 True random monitor control"]
    pub TR_MON_CTL: u32,
    pub RESERVED9: u32,
    #[doc = "< 0x000002C8 True random monitor command"]
    pub TR_MON_CMD: u32,
    pub RESERVED10: u32,
    #[doc = "< 0x000002D0 True random monitor RC control"]
    pub TR_MON_RC_CTL: u32,
    pub RESERVED11: u32,
    #[doc = "< 0x000002D8 True random monitor RC status 0"]
    pub TR_MON_RC_STATUS0: u32,
    #[doc = "< 0x000002DC True random monitor RC status 1"]
    pub TR_MON_RC_STATUS1: u32,
    #[doc = "< 0x000002E0 True random monitor AP control"]
    pub TR_MON_AP_CTL: u32,
    pub RESERVED12: u32,
    #[doc = "< 0x000002E8 True random monitor AP status 0"]
    pub TR_MON_AP_STATUS0: u32,
    #[doc = "< 0x000002EC True random monitor AP status 1"]
    pub TR_MON_AP_STATUS1: u32,
    pub RESERVED13: [u32; 837usize],
    #[doc = "< 0x00001004 Status"]
    pub STATUS: u32,
    pub RESERVED14: [u32; 14usize],
    #[doc = "< 0x00001040 Instruction FIFO control"]
    pub INSTR_FF_CTL: u32,
    #[doc = "< 0x00001044 Instruction FIFO status"]
    pub INSTR_FF_STATUS: u32,
    #[doc = "< 0x00001048 Instruction FIFO write"]
    pub INSTR_FF_WR: u32,
    pub RESERVED15: [u32; 29usize],
    #[doc = "< 0x000010C0 Load 0 FIFO status"]
    pub LOAD0_FF_STATUS: u32,
    pub RESERVED16: [u32; 3usize],
    #[doc = "< 0x000010D0 Load 1 FIFO status"]
    pub LOAD1_FF_STATUS: u32,
    pub RESERVED17: [u32; 7usize],
    #[doc = "< 0x000010F0 Store FIFO status"]
    pub STORE_FF_STATUS: u32,
    pub RESERVED18: [u32; 3usize],
    #[doc = "< 0x00001100 AES control"]
    pub AES_CTL: u32,
    pub RESERVED19: [u32; 31usize],
    #[doc = "< 0x00001180 Result"]
    pub RESULT: u32,
    pub RESERVED20: [u32; 159usize],
    #[doc = "< 0x00001400 CRC control"]
    pub CRC_CTL: u32,
    pub RESERVED21: [u32; 3usize],
    #[doc = "< 0x00001410 CRC data control"]
    pub CRC_DATA_CTL: u32,
    pub RESERVED22: [u32; 3usize],
    #[doc = "< 0x00001420 CRC polynomial control"]
    pub CRC_POL_CTL: u32,
    pub RESERVED23: [u32; 7usize],
    #[doc = "< 0x00001440 CRC remainder control"]
    pub CRC_REM_CTL: u32,
    pub RESERVED24: u32,
    #[doc = "< 0x00001448 CRC remainder result"]
    pub CRC_REM_RESULT: u32,
    pub RESERVED25: [u32; 13usize],
    #[doc = "< 0x00001480 Vector unit control 0"]
    pub VU_CTL0: u32,
    #[doc = "< 0x00001484 Vector unit control 1"]
    pub VU_CTL1: u32,
    #[doc = "< 0x00001488 Vector unit control 2"]
    pub VU_CTL2: u32,
    pub RESERVED26: u32,
    #[doc = "< 0x00001490 Vector unit status"]
    pub VU_STATUS: u32,
    pub RESERVED27: [u32; 11usize],
    #[doc = "< 0x000014C0 Vector unit register-file"]
    pub VU_RF_DATA: [u32; 16usize],
    pub RESERVED28: [u32; 704usize],
    #[doc = "< 0x00002000 Device key address 0 control"]
    pub DEV_KEY_ADDR0_CTL: u32,
    #[doc = "< 0x00002004 Device key address 0"]
    pub DEV_KEY_ADDR0: u32,
    pub RESERVED29: [u32; 6usize],
    #[doc = "< 0x00002020 Device key address 1 control"]
    pub DEV_KEY_ADDR1_CTL: u32,
    #[doc = "< 0x00002024 Device key address 1 control"]
    pub DEV_KEY_ADDR1: u32,
    pub RESERVED30: [u32; 22usize],
    #[doc = "< 0x00002080 Device key status"]
    pub DEV_KEY_STATUS: u32,
    pub RESERVED31: [u32; 31usize],
    #[doc = "< 0x00002100 Device key control 0"]
    pub DEV_KEY_CTL0: u32,
    pub RESERVED32: [u32; 7usize],
    #[doc = "< 0x00002120 Device key control 1"]
    pub DEV_KEY_CTL1: u32,
    pub RESERVED33: [u32; 6071usize],
    #[doc = "< 0x00008000 Memory buffer"]
    pub MEM_BUFF: [u32; 8192usize],
}
#[test]
fn bindgen_test_layout_CRYPTO_V2_Type() {
    const UNINIT: ::core::mem::MaybeUninit<CRYPTO_V2_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<CRYPTO_V2_Type>(),
        65536usize,
        concat!("Size of: ", stringify!(CRYPTO_V2_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<CRYPTO_V2_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(CRYPTO_V2_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CTL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RAM_PWR_CTL) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RAM_PWR_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RAM_PWR_DELAY_CTL) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RAM_PWR_DELAY_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ECC_CTL) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(ECC_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERROR_STATUS0) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(ERROR_STATUS0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ERROR_STATUS1) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(ERROR_STATUS1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTR) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(INTR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTR_SET) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(INTR_SET)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTR_MASK) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(INTR_MASK)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INTR_MASKED) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(INTR_MASKED)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED3) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR_LFSR_CTL0) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(PR_LFSR_CTL0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR_LFSR_CTL1) as usize - ptr as usize },
        516usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(PR_LFSR_CTL1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR_LFSR_CTL2) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(PR_LFSR_CTL2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR_MAX_CTL) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(PR_MAX_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR_CMD) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(PR_CMD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED4) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED4)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).PR_RESULT) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(PR_RESULT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED5) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED5)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_CTL0) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_CTL0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_CTL1) as usize - ptr as usize },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_CTL1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_CTL2) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_CTL2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_STATUS) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_CMD) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_CMD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED6) as usize - ptr as usize },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED6)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_RESULT) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_RESULT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED7) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED7)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_GARO_CTL) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_GARO_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_FIRO_CTL) as usize - ptr as usize },
        676usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_FIRO_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED8) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_MON_CTL) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_MON_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED9) as usize - ptr as usize },
        708usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_MON_CMD) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_MON_CMD)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED10) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_MON_RC_CTL) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_MON_RC_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED11) as usize - ptr as usize },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_MON_RC_STATUS0) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_MON_RC_STATUS0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_MON_RC_STATUS1) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_MON_RC_STATUS1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_MON_AP_CTL) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_MON_AP_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED12) as usize - ptr as usize },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_MON_AP_STATUS0) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_MON_AP_STATUS0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).TR_MON_AP_STATUS1) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(TR_MON_AP_STATUS1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED13) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STATUS) as usize - ptr as usize },
        4100usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED14) as usize - ptr as usize },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INSTR_FF_CTL) as usize - ptr as usize },
        4160usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(INSTR_FF_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INSTR_FF_STATUS) as usize - ptr as usize },
        4164usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(INSTR_FF_STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).INSTR_FF_WR) as usize - ptr as usize },
        4168usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(INSTR_FF_WR)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED15) as usize - ptr as usize },
        4172usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LOAD0_FF_STATUS) as usize - ptr as usize },
        4288usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(LOAD0_FF_STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED16) as usize - ptr as usize },
        4292usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED16)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).LOAD1_FF_STATUS) as usize - ptr as usize },
        4304usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(LOAD1_FF_STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED17) as usize - ptr as usize },
        4308usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED17)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).STORE_FF_STATUS) as usize - ptr as usize },
        4336usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(STORE_FF_STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED18) as usize - ptr as usize },
        4340usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED18)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).AES_CTL) as usize - ptr as usize },
        4352usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(AES_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED19) as usize - ptr as usize },
        4356usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED19)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESULT) as usize - ptr as usize },
        4480usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESULT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED20) as usize - ptr as usize },
        4484usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED20)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRC_CTL) as usize - ptr as usize },
        5120usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(CRC_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED21) as usize - ptr as usize },
        5124usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED21)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRC_DATA_CTL) as usize - ptr as usize },
        5136usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(CRC_DATA_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED22) as usize - ptr as usize },
        5140usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED22)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRC_POL_CTL) as usize - ptr as usize },
        5152usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(CRC_POL_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED23) as usize - ptr as usize },
        5156usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED23)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRC_REM_CTL) as usize - ptr as usize },
        5184usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(CRC_REM_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED24) as usize - ptr as usize },
        5188usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED24)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).CRC_REM_RESULT) as usize - ptr as usize },
        5192usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(CRC_REM_RESULT)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED25) as usize - ptr as usize },
        5196usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED25)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VU_CTL0) as usize - ptr as usize },
        5248usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(VU_CTL0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VU_CTL1) as usize - ptr as usize },
        5252usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(VU_CTL1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VU_CTL2) as usize - ptr as usize },
        5256usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(VU_CTL2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED26) as usize - ptr as usize },
        5260usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED26)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VU_STATUS) as usize - ptr as usize },
        5264usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(VU_STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED27) as usize - ptr as usize },
        5268usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED27)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).VU_RF_DATA) as usize - ptr as usize },
        5312usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(VU_RF_DATA)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED28) as usize - ptr as usize },
        5376usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED28)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEV_KEY_ADDR0_CTL) as usize - ptr as usize },
        8192usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(DEV_KEY_ADDR0_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEV_KEY_ADDR0) as usize - ptr as usize },
        8196usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(DEV_KEY_ADDR0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED29) as usize - ptr as usize },
        8200usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED29)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEV_KEY_ADDR1_CTL) as usize - ptr as usize },
        8224usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(DEV_KEY_ADDR1_CTL)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEV_KEY_ADDR1) as usize - ptr as usize },
        8228usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(DEV_KEY_ADDR1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED30) as usize - ptr as usize },
        8232usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED30)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEV_KEY_STATUS) as usize - ptr as usize },
        8320usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(DEV_KEY_STATUS)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED31) as usize - ptr as usize },
        8324usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED31)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEV_KEY_CTL0) as usize - ptr as usize },
        8448usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(DEV_KEY_CTL0)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED32) as usize - ptr as usize },
        8452usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED32)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).DEV_KEY_CTL1) as usize - ptr as usize },
        8480usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(DEV_KEY_CTL1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).RESERVED33) as usize - ptr as usize },
        8484usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(RESERVED33)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).MEM_BUFF) as usize - ptr as usize },
        32768usize,
        concat!(
            "Offset of field: ",
            stringify!(CRYPTO_V2_Type),
            "::",
            stringify!(MEM_BUFF)
        )
    );
}
#[doc = " \\brief Cryptography component (CRYPTO)"]
pub type CRYPTO_Type = CRYPTO_V2_Type;
#[doc = "< Analog to digital converter"]
pub const cyhal_resource_t_CYHAL_RSC_ADC: cyhal_resource_t = 0;
#[doc = "< Analog to digital converter with Analog Mic support"]
pub const cyhal_resource_t_CYHAL_RSC_ADCMIC: cyhal_resource_t = 1;
#[doc = "< Bluetooth communications block"]
pub const cyhal_resource_t_CYHAL_RSC_BLESS: cyhal_resource_t = 2;
#[doc = "< CAN communication block"]
pub const cyhal_resource_t_CYHAL_RSC_CAN: cyhal_resource_t = 3;
#[doc = "< Clock Path. DEPRECATED."]
pub const cyhal_resource_t_CYHAL_RSC_CLKPATH: cyhal_resource_t = 4;
#[doc = "< Clock"]
pub const cyhal_resource_t_CYHAL_RSC_CLOCK: cyhal_resource_t = 5;
#[doc = "< Crypto hardware accelerator"]
pub const cyhal_resource_t_CYHAL_RSC_CRYPTO: cyhal_resource_t = 6;
#[doc = "< Digital to analog converter"]
pub const cyhal_resource_t_CYHAL_RSC_DAC: cyhal_resource_t = 7;
#[doc = "< DMA controller"]
pub const cyhal_resource_t_CYHAL_RSC_DMA: cyhal_resource_t = 8;
#[doc = "< Datawire DMA controller"]
pub const cyhal_resource_t_CYHAL_RSC_DW: cyhal_resource_t = 9;
#[doc = "< Ethernet communications block"]
pub const cyhal_resource_t_CYHAL_RSC_ETH: cyhal_resource_t = 10;
#[doc = "< General purpose I/O pin"]
pub const cyhal_resource_t_CYHAL_RSC_GPIO: cyhal_resource_t = 11;
#[doc = "< I2S communications block"]
pub const cyhal_resource_t_CYHAL_RSC_I2S: cyhal_resource_t = 12;
#[doc = "< I3C communications block"]
pub const cyhal_resource_t_CYHAL_RSC_I3C: cyhal_resource_t = 13;
#[doc = "< KeyScan block"]
pub const cyhal_resource_t_CYHAL_RSC_KEYSCAN: cyhal_resource_t = 14;
#[doc = "< Segment LCD controller"]
pub const cyhal_resource_t_CYHAL_RSC_LCD: cyhal_resource_t = 15;
#[doc = "< LIN communications block"]
pub const cyhal_resource_t_CYHAL_RSC_LIN: cyhal_resource_t = 16;
#[doc = "< Low power comparator"]
pub const cyhal_resource_t_CYHAL_RSC_LPCOMP: cyhal_resource_t = 17;
#[doc = "< Low power timer"]
pub const cyhal_resource_t_CYHAL_RSC_LPTIMER: cyhal_resource_t = 18;
#[doc = "< Opamp"]
pub const cyhal_resource_t_CYHAL_RSC_OPAMP: cyhal_resource_t = 19;
#[doc = "< PCM/PDM communications block"]
pub const cyhal_resource_t_CYHAL_RSC_PDM: cyhal_resource_t = 20;
#[doc = "< Quad-SPI communications block"]
pub const cyhal_resource_t_CYHAL_RSC_SMIF: cyhal_resource_t = 21;
#[doc = "< Real time clock"]
pub const cyhal_resource_t_CYHAL_RSC_RTC: cyhal_resource_t = 22;
#[doc = "< Serial Communications Block"]
pub const cyhal_resource_t_CYHAL_RSC_SCB: cyhal_resource_t = 23;
#[doc = "< SD Host Controller"]
pub const cyhal_resource_t_CYHAL_RSC_SDHC: cyhal_resource_t = 24;
#[doc = "< SDIO Device Block"]
pub const cyhal_resource_t_CYHAL_RSC_SDIODEV: cyhal_resource_t = 25;
#[doc = "< Timer/Counter/PWM block"]
pub const cyhal_resource_t_CYHAL_RSC_TCPWM: cyhal_resource_t = 26;
#[doc = "< TDM block"]
pub const cyhal_resource_t_CYHAL_RSC_TDM: cyhal_resource_t = 27;
#[doc = "< UDB Array"]
pub const cyhal_resource_t_CYHAL_RSC_UDB: cyhal_resource_t = 28;
#[doc = "< USB communication block"]
pub const cyhal_resource_t_CYHAL_RSC_USB: cyhal_resource_t = 29;
#[doc = "< Placeholder for invalid type"]
pub const cyhal_resource_t_CYHAL_RSC_INVALID: cyhal_resource_t = 30;
#[doc = " Resource types that the hardware manager supports"]
pub type cyhal_resource_t = u32;
#[doc = " @brief Represents a particular instance of a resource on the chip.\n Application code should not rely on the specific contents of this struct.\n They are considered an implementation detail which is subject to change\n between platforms and/or HAL releases."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cyhal_resource_inst_t {
    #[doc = "!< The resource block type"]
    pub type_: cyhal_resource_t,
    #[doc = "!< The resource block index"]
    pub block_num: u8,
    #[doc = " The channel number, if the resource type defines multiple channels\n per block instance. Otherwise, 0"]
    pub channel_num: u8,
}
#[test]
fn bindgen_test_layout_cyhal_resource_inst_t() {
    const UNINIT: ::core::mem::MaybeUninit<cyhal_resource_inst_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cyhal_resource_inst_t>(),
        8usize,
        concat!("Size of: ", stringify!(cyhal_resource_inst_t))
    );
    assert_eq!(
        ::core::mem::align_of::<cyhal_resource_inst_t>(),
        4usize,
        concat!("Alignment of ", stringify!(cyhal_resource_inst_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cyhal_resource_inst_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cyhal_resource_inst_t),
            "::",
            stringify!(block_num)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).channel_num) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(cyhal_resource_inst_t),
            "::",
            stringify!(channel_num)
        )
    );
}
#[doc = " @brief RNG object\n\n Application code should not rely on the specific contents of this struct.\n They are considered an implementation detail which is subject to change\n between platforms and/or HAL releases."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cyhal_trng_t {
    pub base: *mut CRYPTO_Type,
    pub resource: cyhal_resource_inst_t,
}
#[test]
fn bindgen_test_layout_cyhal_trng_t() {
    const UNINIT: ::core::mem::MaybeUninit<cyhal_trng_t> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<cyhal_trng_t>(),
        16usize,
        concat!("Size of: ", stringify!(cyhal_trng_t))
    );
    assert_eq!(
        ::core::mem::align_of::<cyhal_trng_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cyhal_trng_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cyhal_trng_t),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).resource) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cyhal_trng_t),
            "::",
            stringify!(resource)
        )
    );
}
extern "C" {
    #[doc = " Initialize the random number generator.\n\n @param[out] obj  Pointer to a random number generator object. The caller must\n  allocate the memory for this object but the init function will initialize its contents.\n @return The status of the init request\n\n Returns \\ref CY_RSLT_SUCCESS if the operation was successful"]
    pub fn cyhal_trng_init(obj: *mut cyhal_trng_t) -> cy_rslt_t;
}
extern "C" {
    #[doc = " Release the random number generator.\n\n @param[in,out] obj The random number generator object"]
    pub fn cyhal_trng_free(obj: *mut cyhal_trng_t);
}
extern "C" {
    #[doc = " Generate a random number.\n\n @param[in]  obj   The random number generator object\n @return The random number generated\n\n See \\ref subsection_trng_use_case_1"]
    pub fn cyhal_trng_generate(obj: *const cyhal_trng_t) -> u32;
}
