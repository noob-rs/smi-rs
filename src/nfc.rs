#[cfg(target_os = "none")]
use core::{mem::MaybeUninit, ptr::addr_of_mut};

#[cfg(target_os = "none")]
use log::{info, trace};

#[cfg(target_os = "none")]
use crate::mfrc522::{
    cyhal_gpio_t, mfrc522_t, MFRC522_Init, MIFARE_Read, PCD_Init, PCD_ReadRegister,
    PCD_Register_VersionReg, PICC_IsNewCardPresent, PICC_ReadCardSerial, StatusCode,
    StatusCode_STATUS_OK,
};

#[derive(Debug)]
pub struct Nfc {}

#[cfg(target_os = "none")]
pub struct NfcPins {
    pub mosi: cyhal_gpio_t,
    pub miso: cyhal_gpio_t,
    pub sclk: cyhal_gpio_t,
    pub cs: cyhal_gpio_t,
    pub reset: cyhal_gpio_t,
}

#[cfg(target_os = "none")]
static mut MRFC: mfrc522_t = unsafe { MaybeUninit::zeroed().assume_init() };

#[cfg(target_os = "none")]
impl Nfc {
    pub fn new(nfc_pins: NfcPins) -> Self {
        unsafe {
            MFRC522_Init(
                addr_of_mut!(MRFC),
                nfc_pins.mosi,
                nfc_pins.miso,
                nfc_pins.sclk,
                nfc_pins.cs,
                nfc_pins.reset,
            );
            PCD_Init(addr_of_mut!(MRFC));
            info!(
                "Nfc::new: pcd_version: {}",
                PCD_ReadRegister(addr_of_mut!(MRFC), PCD_Register_VersionReg as u8)
            );
        }
        Self {}
    }

    pub fn is_new_card_present(&mut self) -> bool {
        unsafe { PICC_IsNewCardPresent(addr_of_mut!(MRFC)) }
    }

    pub fn read_card_serial(&mut self) -> Result<&[u8], ()> {
        let status = unsafe { PICC_ReadCardSerial(addr_of_mut!(MRFC)) };
        if status {
            Ok(unsafe { &MRFC.uid.uidByte[..MRFC.uid.size as usize] })
        } else {
            Err(())
        }
    }

    pub fn mifare_read(&mut self, block: u8) -> Result<[u8; 18], StatusCode> {
        trace!("Nfc::mifare_read(block: {block})");
        let mut buffer = [0u8; 18];
        let mut buffer_size = buffer.len() as u8;
        let status = unsafe {
            MIFARE_Read(
                addr_of_mut!(MRFC),
                block,
                buffer.as_mut_ptr(),
                &mut buffer_size,
            )
        };
        trace!("Nfc::mifare_read status: {status:02x} buffer: {buffer:02x?}");
        if status == StatusCode_STATUS_OK as u8 {
            Ok(buffer)
        } else {
            Err(status.into())
        }
    }
}

#[cfg(not(target_os = "none"))]
impl Nfc {
    pub fn new() -> Self {
        Self {}
    }

    pub fn is_new_card_present(&mut self) -> bool {
        true
    }

    pub fn read_card_serial(&mut self) -> Result<&[u8], ()> {
        Ok(&TAG_DATA.tag_id)
    }

    pub fn mifare_read(&mut self, block: u8) -> Result<[u8; 18], ()> {
        let mut buffer = [0u8; 18];
        buffer[..4].copy_from_slice(&TAG_DATA.data[block as usize - 4]);
        Ok(buffer)
    }
}

#[cfg(not(target_os = "none"))]
struct TagData {
    tag_id: [u8; 7],
    data: [[u8; 4]; 3 * 64],
}

#[cfg(not(target_os = "none"))]
const TAG_DATA: TagData = TagData {
    tag_id: [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    data: [
        [0x1d, 0x77, 0x4f, 0x8e],
        [0x92, 0x93, 0x5e, 0x63],
        [0x72, 0xb7, 0x44, 0x3d],
        [0x1c, 0x8b, 0xda, 0x40],
        [0x8a, 0xad, 0xff, 0x58],
        [0x59, 0x22, 0xfc, 0xef],
        [0x18, 0x14, 0x98, 0x46],
        [0x30, 0x1a, 0xe0, 0x12],
        [0xb4, 0x5e, 0x2a, 0xfd],
        [0x21, 0x3b, 0xe6, 0xa9],
        [0x53, 0x09, 0x75, 0x29],
        [0xd6, 0x04, 0xbf, 0xf1],
        [0x23, 0x4e, 0xbd, 0x25],
        [0x6a, 0x84, 0xc7, 0x6b],
        [0x40, 0xac, 0x20, 0x78],
        [0x3c, 0x70, 0x4b, 0xd8],
        [0x36, 0x1f, 0x82, 0x54],
        [0x11, 0xec, 0x6b, 0x15],
        [0x17, 0xa8, 0x28, 0x7b],
        [0xdb, 0x80, 0x04, 0x29],
        [0xd4, 0x21, 0x65, 0xc9],
        [0x28, 0x5d, 0x93, 0x52],
        [0x1c, 0xe4, 0x02, 0x73],
        [0x42, 0x1a, 0xbc, 0x2f],
        [0x0b, 0x34, 0xfe, 0xdd],
        [0x4d, 0x4b, 0xf4, 0x7e],
        [0x03, 0x07, 0xbe, 0xb8],
        [0x1b, 0xae, 0xab, 0x64],
        [0xa2, 0x1a, 0xa3, 0xa5],
        [0xbe, 0x4e, 0xf5, 0xd8],
        [0x3d, 0xc2, 0x65, 0x90],
        [0xcf, 0xb5, 0x6e, 0xb1],
        [0xb5, 0xd1, 0x6f, 0x56],
        [0x03, 0x48, 0xd6, 0x30],
        [0x5e, 0xdf, 0xfe, 0x37],
        [0xde, 0x35, 0x84, 0x5c],
        [0x05, 0x6a, 0x5b, 0xc1],
        [0x9d, 0x58, 0x5b, 0x8e],
        [0x67, 0x85, 0x23, 0x4c],
        [0x07, 0x5c, 0x15, 0x00],
        [0xa9, 0xc3, 0xb9, 0x9d],
        [0x13, 0xd9, 0x92, 0xb0],
        [0x2a, 0x09, 0x80, 0x46],
        [0xec, 0x34, 0x03, 0x32],
        [0xf5, 0x44, 0x68, 0xea],
        [0x2d, 0xbb, 0xbb, 0x17],
        [0x0a, 0xa1, 0xc7, 0x24],
        [0xfd, 0x1f, 0xc4, 0xeb],
        [0x0c, 0x0e, 0x29, 0x7f],
        [0x38, 0xdc, 0xd3, 0x76],
        [0xf7, 0xdd, 0xe1, 0xe0],
        [0x3b, 0x4e, 0x04, 0xc4],
        [0xce, 0x20, 0x91, 0x0d],
        [0xa7, 0x91, 0x2e, 0xf8],
        [0x00, 0xcd, 0xa3, 0x6d],
        [0x2c, 0xfa, 0x44, 0x06],
        [0xab, 0xee, 0x7a, 0x32],
        [0x37, 0xcf, 0x30, 0xb0],
        [0x25, 0x50, 0x65, 0x25],
        [0xb4, 0xab, 0x16, 0x64],
        [0x01, 0x74, 0x6e, 0xb1],
        [0x06, 0x77, 0xf2, 0x75],
        [0x4b, 0x81, 0x1c, 0xb7],
        [0x2c, 0xb3, 0xe4, 0xef],
        [0x26, 0xab, 0x3f, 0x4d],
        [0xe0, 0xcc, 0x7a, 0xd7],
        [0x29, 0xc4, 0x4d, 0x99],
        [0xda, 0xec, 0xa5, 0x33],
        [0x1a, 0x12, 0x63, 0x51],
        [0x0e, 0xe6, 0x2f, 0x97],
        [0xb4, 0x89, 0x52, 0xca],
        [0xf9, 0x57, 0xcc, 0x68],
        [0x0f, 0x6b, 0x47, 0xe7],
        [0x84, 0xf4, 0xcd, 0x27],
        [0xae, 0x21, 0x99, 0xf4],
        [0x11, 0xb8, 0x99, 0x60],
        [0xe4, 0xc6, 0x6f, 0x2d],
        [0xb4, 0xcf, 0x63, 0x05],
        [0x2f, 0x80, 0xeb, 0xff],
        [0xef, 0xe3, 0x19, 0x08],
        [0x53, 0x19, 0x6d, 0xb8],
        [0x14, 0xca, 0x2e, 0xb6],
        [0xd2, 0xc0, 0x60, 0x2c],
        [0xe9, 0x10, 0x0f, 0x72],
        [0x3f, 0x40, 0xc8, 0xb5],
        [0x55, 0x27, 0xf5, 0x34],
        [0xb9, 0x97, 0xc1, 0x2e],
        [0x0a, 0x75, 0x7b, 0x85],
        [0xe3, 0xf5, 0xc4, 0x3b],
        [0xb5, 0x5b, 0x01, 0x2a],
        [0x3e, 0xd3, 0xff, 0x1d],
        [0x26, 0x9b, 0xac, 0x88],
        [0xef, 0x2e, 0x38, 0xb3],
        [0x36, 0xac, 0x84, 0xcb],
        [0xc6, 0x95, 0x1e, 0x01],
        [0xae, 0x64, 0x71, 0xca],
        [0x24, 0xe0, 0xaa, 0xc6],
        [0x57, 0x20, 0xec, 0x74],
        [0xaf, 0x9b, 0x30, 0xa2],
        [0x33, 0x19, 0x9d, 0x82],
        [0x0d, 0x80, 0xad, 0xec],
        [0xe1, 0x18, 0xc6, 0x5a],
        [0x15, 0x8f, 0x4f, 0x3e],
        [0x12, 0xb3, 0x8c, 0x88],
        [0xb6, 0x79, 0x35, 0x26],
        [0x04, 0x7f, 0x65, 0x87],
        [0xa5, 0xfc, 0x82, 0x7a],
        [0x24, 0x3b, 0x1d, 0xf3],
        [0x2b, 0x75, 0xd2, 0x7a],
        [0x48, 0x26, 0x82, 0x1f],
        [0xd8, 0x42, 0xb2, 0xcd],
        [0x34, 0x12, 0x87, 0xf5],
        [0xce, 0x3e, 0x62, 0x0e],
        [0x77, 0xc6, 0x8e, 0x70],
        [0x09, 0x2f, 0x40, 0x9b],
        [0xa1, 0xa3, 0x6b, 0x7a],
        [0x81, 0x9d, 0x7e, 0x45],
        [0x26, 0x45, 0x57, 0x00],
        [0x8d, 0xe9, 0xf0, 0x22],
        [0x87, 0xea, 0x2b, 0xbf],
        [0x22, 0x32, 0x8c, 0x59],
        [0xfa, 0x7a, 0xdf, 0x14],
        [0xf6, 0x38, 0x68, 0xd2],
        [0x3a, 0x42, 0x06, 0xf2],
        [0x3a, 0x75, 0xe5, 0xa8],
        [0x7c, 0xdb, 0x2f, 0xec],
        [0x27, 0xaf, 0xfa, 0xca],
        [0x25, 0xec, 0xdd, 0x0e],
        [0x9a, 0xf0, 0xcd, 0x44],
        [0x06, 0xa6, 0x55, 0x5f],
        [0x52, 0xbe, 0x36, 0x43],
        [0xf8, 0xd9, 0x64, 0x0a],
        [0x2e, 0xe0, 0xae, 0x9a],
        [0xd8, 0x55, 0xf6, 0xed],
        [0x52, 0xf2, 0x7d, 0xd4],
        [0x12, 0x21, 0x0c, 0xf8],
        [0x18, 0x43, 0xec, 0x4b],
        [0xe7, 0x37, 0xd1, 0x5e],
        [0x08, 0x2a, 0x36, 0xda],
        [0x6e, 0xab, 0xe3, 0xee],
        [0x53, 0x14, 0xce, 0x82],
        [0x39, 0xb5, 0xe1, 0x85],
        [0xb5, 0x12, 0x28, 0x73],
        [0x3c, 0x6a, 0x86, 0xe1],
        [0x0d, 0xc5, 0xf4, 0x53],
        [0xef, 0x42, 0xa8, 0x63],
        [0x3b, 0xed, 0x16, 0x6e],
        [0x25, 0xb2, 0x27, 0xf8],
        [0x47, 0xac, 0x8e, 0x42],
        [0x6d, 0xc4, 0xe8, 0xb4],
        [0x16, 0xe0, 0x57, 0xb3],
        [0x61, 0x7b, 0xf1, 0x3d],
        [0x12, 0xa6, 0xd2, 0xd3],
        [0x1e, 0xb9, 0x8c, 0x75],
        [0x1b, 0xcb, 0xe0, 0xcc],
        [0xc3, 0xdb, 0x54, 0xaf],
        [0x13, 0xe9, 0xd4, 0x55],
        [0xaa, 0x39, 0x92, 0xad],
        [0x27, 0x09, 0x0d, 0x50],
        [0x35, 0x30, 0x86, 0x65],
        [0x40, 0x94, 0xde, 0xab],
        [0x96, 0x60, 0x45, 0x8a],
        [0x32, 0x03, 0xee, 0xfc],
        [0x09, 0x28, 0x5c, 0x2c],
        [0xe7, 0xc4, 0x48, 0x7e],
        [0x19, 0x66, 0xfa, 0xdc],
        [0x85, 0x42, 0x88, 0x66],
        [0x3e, 0x2e, 0x43, 0xe2],
        [0x1f, 0xa6, 0x84, 0x29],
        [0x61, 0x27, 0x3f, 0xa3],
        [0x29, 0x05, 0x14, 0x75],
        [0x20, 0x6f, 0x80, 0xda],
        [0x91, 0xc6, 0x78, 0x20],
        [0xd5, 0xce, 0x87, 0xe1],
        [0x10, 0x80, 0xe9, 0x67],
        [0x52, 0x4f, 0xc6, 0xd5],
        [0x6e, 0x81, 0xa2, 0x54],
        [0x02, 0x29, 0xcb, 0x9c],
        [0xda, 0xef, 0x5b, 0x82],
        [0xfb, 0x5a, 0x37, 0x26],
        [0x1a, 0x23, 0xe8, 0xca],
        [0x8a, 0xc4, 0xc8, 0x9f],
        [0x23, 0x5e, 0xae, 0x16],
        [0x38, 0x7d, 0xe1, 0x24],
        [0x10, 0x62, 0x9b, 0x3d],
        [0x2b, 0xed, 0x91, 0x16],
        [0x30, 0xec, 0x06, 0x96],
        [0xd9, 0xad, 0xcc, 0x48],
        [0xf8, 0xef, 0xe2, 0x73],
        [0x31, 0xcc, 0x24, 0xd1],
        [0x97, 0x96, 0x4f, 0xfb],
        [0xf3, 0xc4, 0xde, 0x6d],
    ],
};
